// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace ps5_NewTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// OpenFile - Use 'OpenFileParams' to pass parameters into this method.
        /// </summary>
        public void OpenFile()
        {
            #region Variable Declarations
            WinWindow uISpreadsheet1Window1 = this.UISpreadsheet1Window;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.OpenFileParams.UISpreadsheet1WindowExePath, this.OpenFileParams.UISpreadsheet1WindowAlternateExePath);

            // Maximize window 'Spreadsheet 1'.
            uISpreadsheet1Window1.Maximized = this.OpenFileParams.UISpreadsheet1WindowMaximized;
        }
        
        /// <summary>
        /// CircularExceptionTest1 - Use 'CircularExceptionTest1Params' to pass parameters into this method.
        /// </summary>
        public void CircularExceptionTest1()
        {
            #region Variable Declarations
            WinEdit uIContents_boxEdit = this.UISpreadsheet1Window.UIContents_boxWindow.UIContents_boxEdit;
            #endregion

            // Type '=a1' in 'contents_box' text box
            uIContents_boxEdit.Text = this.CircularExceptionTest1Params.UIContents_boxEditText;

            // Type '{Enter}' in 'contents_box' text box
            Keyboard.SendKeys(uIContents_boxEdit, this.CircularExceptionTest1Params.UIContents_boxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CircularException1 - Use 'CircularException1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CircularException1()
        {
            #region Variable Declarations
            WinText uIExceptionoftypeSSCirText = this.UIExceptionoftypeSSCirWindow.UIExceptionoftypeSSCirText;
            #endregion

            // Verify that 'Exception of type 'SS.CircularException' was throw...' label's property 'ControlType' equals 'Text'
            Assert.AreEqual(this.CircularException1ExpectedValues.UIExceptionoftypeSSCirTextControlType, uIExceptionoftypeSSCirText.ControlType.ToString());
        }
        
        /// <summary>
        /// SetContentsTest1 - Use 'SetContentsTest1Params' to pass parameters into this method.
        /// </summary>
        public void SetContentsTest1()
        {
            #region Variable Declarations
            WinEdit uIContents_boxEdit = this.UISpreadsheet1Window.UIContents_boxWindow.UIContents_boxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type '2' in 'contents_box' text box
            uIContents_boxEdit.Text = this.SetContentsTest1Params.UIContents_boxEditText;

            // Type '{Enter}' in 'contents_box' text box
            Keyboard.SendKeys(uIContents_boxEdit, this.SetContentsTest1Params.UIContents_boxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(65, 30));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(72, 38));
        }
        
        /// <summary>
        /// ValueAssertion1 - Use 'ValueAssertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValueAssertion1()
        {
            #region Variable Declarations
            WinEdit uIValue_boxEdit = this.UISpreadsheet1Window.UIValue_boxWindow.UIValue_boxEdit;
            #endregion

            // Verify that 'value_box' text box's property 'Text' equals '2'
            Assert.AreEqual(this.ValueAssertion1ExpectedValues.UIValue_boxEditText, uIValue_boxEdit.Text);
        }
        
        /// <summary>
        /// SaveFile1
        /// </summary>
        public void SaveFile1()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow.UIVisualStudio2010ListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UISaveAsWindow.UIItemWindow1.UIProjectsListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UISaveAsWindow.UIItemWindow2.UIPS6ListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UISaveAsWindow.UIItemWindow3.UIAlexssListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(60, 13));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(54, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(39, 18));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(26, 15));

            // Click 'Name' text box
            Mouse.Click(uINameEdit3, new Point(40, 6));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(54, 18));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(34, 9));
        }
        
        /// <summary>
        /// SaveFileAssertion1 - Use 'SaveFileAssertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveFileAssertion1()
        {
            #region Variable Declarations
            WinText uIFileLocationCUsersAlText = this.UISpreadsheet1Window.UIFileLocationCUsersAlWindow.UIFileLocationCUsersAlText;
            #endregion

            // Verify that 'File Location: C:\Users\Alex\Documents\Visual Stud...' label's property 'DisplayText' equals 'File Location: C:\Users\Alex\Documents\Visual Studio 2010\Projects\PS6\Alex.ss'
            Assert.AreEqual(this.SaveFileAssertion1ExpectedValues.UIFileLocationCUsersAlTextDisplayText, uIFileLocationCUsersAlText.DisplayText);
        }
        
        /// <summary>
        /// SaveAndOpen1 - Use 'SaveAndOpen1Params' to pass parameters into this method.
        /// </summary>
        public void SaveAndOpen1()
        {
            #region Variable Declarations
            WinEdit uIContents_boxEdit1 = this.UISpreadsheet1Window.UIContents_boxWindow.UIContents_boxEdit1;
            WinEdit uIContents_boxEdit2 = this.UISpreadsheet1Window.UIContents_boxWindow.UIContents_boxEdit2;
            WinMenuItem uISaveMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAlexssListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Type '3' in 'contents_box' text box
            uIContents_boxEdit1.Text = this.SaveAndOpen1Params.UIContents_boxEdit1Text;

            // Type '{Enter}' in 'contents_box' text box
            Keyboard.SendKeys(uIContents_boxEdit2, this.SaveAndOpen1Params.UIContents_boxEdit2SendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(58, 13));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(78, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(27, 6));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(35, 14));
        }
        
        /// <summary>
        /// SaveAndOpenAssertion1 - Use 'SaveAndOpenAssertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveAndOpenAssertion1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet2Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Verify that 'spreadsheetPanel1' client's property 'Exists' equals 'True'
            Assert.AreEqual(this.SaveAndOpenAssertion1ExpectedValues.UISpreadsheetPanel1ClientExists, uISpreadsheetPanel1Client.Exists);
        }
        
        #region Properties
        public virtual OpenFileParams OpenFileParams
        {
            get
            {
                if ((this.mOpenFileParams == null))
                {
                    this.mOpenFileParams = new OpenFileParams();
                }
                return this.mOpenFileParams;
            }
        }
        
        public virtual CircularExceptionTest1Params CircularExceptionTest1Params
        {
            get
            {
                if ((this.mCircularExceptionTest1Params == null))
                {
                    this.mCircularExceptionTest1Params = new CircularExceptionTest1Params();
                }
                return this.mCircularExceptionTest1Params;
            }
        }
        
        public virtual CircularException1ExpectedValues CircularException1ExpectedValues
        {
            get
            {
                if ((this.mCircularException1ExpectedValues == null))
                {
                    this.mCircularException1ExpectedValues = new CircularException1ExpectedValues();
                }
                return this.mCircularException1ExpectedValues;
            }
        }
        
        public virtual SetContentsTest1Params SetContentsTest1Params
        {
            get
            {
                if ((this.mSetContentsTest1Params == null))
                {
                    this.mSetContentsTest1Params = new SetContentsTest1Params();
                }
                return this.mSetContentsTest1Params;
            }
        }
        
        public virtual ValueAssertion1ExpectedValues ValueAssertion1ExpectedValues
        {
            get
            {
                if ((this.mValueAssertion1ExpectedValues == null))
                {
                    this.mValueAssertion1ExpectedValues = new ValueAssertion1ExpectedValues();
                }
                return this.mValueAssertion1ExpectedValues;
            }
        }
        
        public virtual SaveFileAssertion1ExpectedValues SaveFileAssertion1ExpectedValues
        {
            get
            {
                if ((this.mSaveFileAssertion1ExpectedValues == null))
                {
                    this.mSaveFileAssertion1ExpectedValues = new SaveFileAssertion1ExpectedValues();
                }
                return this.mSaveFileAssertion1ExpectedValues;
            }
        }
        
        public virtual SaveAndOpen1Params SaveAndOpen1Params
        {
            get
            {
                if ((this.mSaveAndOpen1Params == null))
                {
                    this.mSaveAndOpen1Params = new SaveAndOpen1Params();
                }
                return this.mSaveAndOpen1Params;
            }
        }
        
        public virtual SaveAndOpenAssertion1ExpectedValues SaveAndOpenAssertion1ExpectedValues
        {
            get
            {
                if ((this.mSaveAndOpenAssertion1ExpectedValues == null))
                {
                    this.mSaveAndOpenAssertion1ExpectedValues = new SaveAndOpenAssertion1ExpectedValues();
                }
                return this.mSaveAndOpenAssertion1ExpectedValues;
            }
        }
        
        public UISpreadsheet1Window UISpreadsheet1Window
        {
            get
            {
                if ((this.mUISpreadsheet1Window == null))
                {
                    this.mUISpreadsheet1Window = new UISpreadsheet1Window();
                }
                return this.mUISpreadsheet1Window;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIExceptionoftypeSSCirWindow UIExceptionoftypeSSCirWindow
        {
            get
            {
                if ((this.mUIExceptionoftypeSSCirWindow == null))
                {
                    this.mUIExceptionoftypeSSCirWindow = new UIExceptionoftypeSSCirWindow();
                }
                return this.mUIExceptionoftypeSSCirWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISpreadsheet2Window UISpreadsheet2Window
        {
            get
            {
                if ((this.mUISpreadsheet2Window == null))
                {
                    this.mUISpreadsheet2Window = new UISpreadsheet2Window();
                }
                return this.mUISpreadsheet2Window;
            }
        }
        #endregion
        
        #region Fields
        private OpenFileParams mOpenFileParams;
        
        private CircularExceptionTest1Params mCircularExceptionTest1Params;
        
        private CircularException1ExpectedValues mCircularException1ExpectedValues;
        
        private SetContentsTest1Params mSetContentsTest1Params;
        
        private ValueAssertion1ExpectedValues mValueAssertion1ExpectedValues;
        
        private SaveFileAssertion1ExpectedValues mSaveFileAssertion1ExpectedValues;
        
        private SaveAndOpen1Params mSaveAndOpen1Params;
        
        private SaveAndOpenAssertion1ExpectedValues mSaveAndOpenAssertion1ExpectedValues;
        
        private UISpreadsheet1Window mUISpreadsheet1Window;
        
        private UIOKWindow mUIOKWindow;
        
        private UIExceptionoftypeSSCirWindow mUIExceptionoftypeSSCirWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISpreadsheet2Window mUISpreadsheet2Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class OpenFileParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Alex\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Maximize window 'Spreadsheet 1'.
        /// </summary>
        public bool UISpreadsheet1WindowMaximized = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularExceptionTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class CircularExceptionTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1' in 'contents_box' text box
        /// </summary>
        public string UIContents_boxEditText = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'contents_box' text box
        /// </summary>
        public string UIContents_boxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularException1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class CircularException1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Exception of type 'SS.CircularException' was throw...' label's property 'ControlType' equals 'Text'
        /// </summary>
        public string UIExceptionoftypeSSCirTextControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetContentsTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SetContentsTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'contents_box' text box
        /// </summary>
        public string UIContents_boxEditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contents_box' text box
        /// </summary>
        public string UIContents_boxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueAssertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValueAssertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'value_box' text box's property 'Text' equals '2'
        /// </summary>
        public string UIValue_boxEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveFileAssertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SaveFileAssertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'File Location: C:\Users\Alex\Documents\Visual Stud...' label's property 'DisplayText' equals 'File Location: C:\Users\Alex\Documents\Visual Studio 2010\Projects\PS6\Alex.ss'
        /// </summary>
        public string UIFileLocationCUsersAlTextDisplayText = "File Location: C:\\Users\\Alex\\Documents\\Visual Studio 2010\\Projects\\PS6\\Alex.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpen1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SaveAndOpen1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '3' in 'contents_box' text box
        /// </summary>
        public string UIContents_boxEdit1Text = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contents_box' text box
        /// </summary>
        public string UIContents_boxEdit2SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpenAssertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SaveAndOpenAssertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'spreadsheetPanel1' client's property 'Exists' equals 'True'
        /// </summary>
        public bool UISpreadsheetPanel1ClientExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheet1Window : WinWindow
    {
        
        public UISpreadsheet1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet 1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public UIContents_boxWindow UIContents_boxWindow
        {
            get
            {
                if ((this.mUIContents_boxWindow == null))
                {
                    this.mUIContents_boxWindow = new UIContents_boxWindow(this);
                }
                return this.mUIContents_boxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIValue_boxWindow UIValue_boxWindow
        {
            get
            {
                if ((this.mUIValue_boxWindow == null))
                {
                    this.mUIValue_boxWindow = new UIValue_boxWindow(this);
                }
                return this.mUIValue_boxWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIFileLocationCUsersAlWindow UIFileLocationCUsersAlWindow
        {
            get
            {
                if ((this.mUIFileLocationCUsersAlWindow == null))
                {
                    this.mUIFileLocationCUsersAlWindow = new UIFileLocationCUsersAlWindow(this);
                }
                return this.mUIFileLocationCUsersAlWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIContents_boxWindow mUIContents_boxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIValue_boxWindow mUIValue_boxWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIFileLocationCUsersAlWindow mUIFileLocationCUsersAlWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContents_boxWindow : WinWindow
    {
        
        public UIContents_boxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contents_box";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContents_boxEdit
        {
            get
            {
                if ((this.mUIContents_boxEdit == null))
                {
                    this.mUIContents_boxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContents_boxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File Location: ";
                    this.mUIContents_boxEdit.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUIContents_boxEdit;
            }
        }
        
        public WinEdit UIContents_boxEdit1
        {
            get
            {
                if ((this.mUIContents_boxEdit1 == null))
                {
                    this.mUIContents_boxEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContents_boxEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "File Location: C:\\Users\\Alex\\Documents\\Visual Studio 2010\\Projects\\PS6\\Alex.ss";
                    this.mUIContents_boxEdit1.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUIContents_boxEdit1;
            }
        }
        
        public WinEdit UIContents_boxEdit2
        {
            get
            {
                if ((this.mUIContents_boxEdit2 == null))
                {
                    this.mUIContents_boxEdit2 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContents_boxEdit2.SearchProperties[WinEdit.PropertyNames.Name] = "File Location: C:\\Users\\Alex\\Documents\\Visual Studio 2010\\Projects\\PS6\\Alex.ss";
                    this.mUIContents_boxEdit2.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUIContents_boxEdit2;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContents_boxEdit;
        
        private WinEdit mUIContents_boxEdit1;
        
        private WinEdit mUIContents_boxEdit2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValue_boxWindow : WinWindow
    {
        
        public UIValue_boxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "value_box";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValue_boxEdit
        {
            get
            {
                if ((this.mUIValue_boxEdit == null))
                {
                    this.mUIValue_boxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValue_boxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "A1 Value";
                    this.mUIValue_boxEdit.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUIValue_boxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValue_boxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileLocationCUsersAlWindow : WinWindow
    {
        
        public UIFileLocationCUsersAlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "position_label";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinText UIFileLocationCUsersAlText
        {
            get
            {
                if ((this.mUIFileLocationCUsersAlText == null))
                {
                    this.mUIFileLocationCUsersAlText = new WinText(this);
                    #region Search Criteria
                    this.mUIFileLocationCUsersAlText.SearchProperties[WinText.PropertyNames.Name] = "File Location: C:\\Users\\Alex\\Documents\\Visual Studio 2010\\Projects\\PS6\\Alex.ss";
                    this.mUIFileLocationCUsersAlText.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUIFileLocationCUsersAlText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIFileLocationCUsersAlText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExceptionoftypeSSCirWindow : WinWindow
    {
        
        public UIExceptionoftypeSSCirWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Exception of type \'SS.CircularException\' was thrown.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Exception of type \'SS.CircularException\' was thrown.");
            #endregion
        }
        
        #region Properties
        public WinText UIExceptionoftypeSSCirText
        {
            get
            {
                if ((this.mUIExceptionoftypeSSCirText == null))
                {
                    this.mUIExceptionoftypeSSCirText = new WinText(this);
                    #region Search Criteria
                    this.mUIExceptionoftypeSSCirText.SearchProperties[WinText.PropertyNames.Name] = "Exception of type \'SS.CircularException\' was thrown.";
                    this.mUIExceptionoftypeSSCirText.WindowTitles.Add("Exception of type \'SS.CircularException\' was thrown.");
                    #endregion
                }
                return this.mUIExceptionoftypeSSCirText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIExceptionoftypeSSCirText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIVisualStudio2010ListItem UIVisualStudio2010ListItem
        {
            get
            {
                if ((this.mUIVisualStudio2010ListItem == null))
                {
                    this.mUIVisualStudio2010ListItem = new UIVisualStudio2010ListItem(this);
                }
                return this.mUIVisualStudio2010ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVisualStudio2010ListItem mUIVisualStudio2010ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVisualStudio2010ListItem : WinListItem
    {
        
        public UIVisualStudio2010ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Visual Studio 2010";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIProjectsListItem UIProjectsListItem
        {
            get
            {
                if ((this.mUIProjectsListItem == null))
                {
                    this.mUIProjectsListItem = new UIProjectsListItem(this);
                }
                return this.mUIProjectsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIProjectsListItem mUIProjectsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProjectsListItem : WinListItem
    {
        
        public UIProjectsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Projects";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIPS6ListItem UIPS6ListItem
        {
            get
            {
                if ((this.mUIPS6ListItem == null))
                {
                    this.mUIPS6ListItem = new UIPS6ListItem(this);
                }
                return this.mUIPS6ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPS6ListItem mUIPS6ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPS6ListItem : WinListItem
    {
        
        public UIPS6ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "PS6";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIAlexssListItem UIAlexssListItem
        {
            get
            {
                if ((this.mUIAlexssListItem == null))
                {
                    this.mUIAlexssListItem = new UIAlexssListItem(this);
                }
                return this.mUIAlexssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAlexssListItem mUIAlexssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAlexssListItem : WinListItem
    {
        
        public UIAlexssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Alex.ss";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIAlexssListItem1 UIAlexssListItem
        {
            get
            {
                if ((this.mUIAlexssListItem == null))
                {
                    this.mUIAlexssListItem = new UIAlexssListItem1(this);
                }
                return this.mUIAlexssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAlexssListItem1 mUIAlexssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAlexssListItem1 : WinListItem
    {
        
        public UIAlexssListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Alex.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheet2Window : WinWindow
    {
        
        public UISpreadsheet2Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet 2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet 2");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet 2");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet 2");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
}
